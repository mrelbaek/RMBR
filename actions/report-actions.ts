"use server"

import { getSupabaseClient } from "../lib/supabase"
import { revalidatePath } from "next/cache"

/**
 * Processes an order by generating a report and updating the order status
 */
export async function processOrder(orderId: string): Promise<{ success: boolean; error?: string; details?: any }> {
  console.log("Processing order:", orderId)

  try {
    const supabase = getSupabaseClient()

    if (!supabase) {
      console.error("Supabase client is not initialized")
      return {
        success: false,
        error: "Database connection error",
        details: {
          supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL ? "set" : "missing",
          supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? "set" : "missing",
        },
      }
    }

    // Get the order details
    const { data: order, error: fetchError } = await supabase.from("orders").select("*").eq("id", orderId).single()

    if (fetchError || !order) {
      console.error("Error fetching order:", fetchError)
      return { success: false, error: "Order not found", details: fetchError }
    }

    // Update order status to processing
    await supabase.from("orders").update({ status: "processing" }).eq("id", orderId)
    console.log("Order status updated to processing")

    try {
      // Check if OpenAI API key is set
      if (!process.env.OPENAI_API_KEY) {
        console.error("OpenAI API key is missing")
        return {
          success: false,
          error: "OpenAI API key is missing",
          details: {
            openaiApiKey: process.env.OPENAI_API_KEY ? "set" : "missing",
          },
        }
      }

      // Dynamically import the server-only module
      // This ensures it's only loaded on the server
      console.log("Importing OpenAI server module")
      const { generateReportWithAI } = await import("../lib/openai-server.js")
      console.log("OpenAI server module imported successfully")

      // Generate the report
      console.log("Generating report for order:", orderId)
      const report = await generateReportWithAI({
        bookTitle: order.book_title,
        author: order.author,
        level: order.grade_level,
        length: order.length,
        sampleText: order.sample_text,
        errorRate: order.authentic_style ? 5 : 0,
        targetGrade: order.target_grade || "A",
      })
      console.log("Report generated successfully")

      // Update the order with the generated report and mark as completed
      console.log("Updating order with generated report")
      const { error: updateError } = await supabase
        .from("orders")
        .update({
          report_text: report,
          status: "completed",
          completed_at: new Date().toISOString(),
        })
        .eq("id", orderId)

      if (updateError) {
        console.error("Error updating order with report:", updateError)
        return { success: false, error: "Failed to update order with report", details: updateError }
      }

      console.log("Order updated successfully")
      revalidatePath(`/view-report/${orderId}`)
      revalidatePath("/dashboard")

      return {
        success: true,
        details: {
          reportLength: report.length,
          isOpenAI: report.includes("[Generated by OpenAI API]"),
          isMock: report.includes("[Generated by Mock Generator"),
        },
      }
    } catch (error: any) {
      console.error("Error generating report:", error)

      // If report generation fails, update the order status to failed
      await supabase
        .from("orders")
        .update({
          status: "failed",
          completed_at: new Date().toISOString(),
        })
        .eq("id", orderId)

      return {
        success: false,
        error: `Failed to generate report: ${error.message}`,
        details: {
          message: error.message,
          stack: error.stack,
          name: error.name,
        },
      }
    }
  } catch (error: any) {
    console.error("Error processing order:", error)
    return {
      success: false,
      error: error.message || "Failed to process order",
      details: {
        message: error.message,
        stack: error.stack,
        name: error.name,
      },
    }
  }
}

/**
 * Gets a report for a specific order
 */
export async function getReport(orderId: string): Promise<{ report?: string; error?: string; details?: any }> {
  try {
    const supabase = getSupabaseClient()

    if (!supabase) {
      console.error("Supabase client is not initialized")
      return {
        error: "Database connection error",
        details: {
          supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL ? "set" : "missing",
          supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? "set" : "missing",
        },
      }
    }

    const { data: order, error } = await supabase
      .from("orders")
      .select("report_text, status")
      .eq("id", orderId)
      .single()

    if (error) {
      console.error("Error fetching report:", error)
      return { error: "Report not found", details: error }
    }

    if (order.status !== "completed" || !order.report_text) {
      return { error: "Report not yet available", details: { status: order.status } }
    }

    return {
      report: order.report_text,
      details: {
        reportLength: order.report_text.length,
        isOpenAI: order.report_text.includes("[Generated by OpenAI API]"),
        isMock: order.report_text.includes("[Generated by Mock Generator"),
      },
    }
  } catch (error: any) {
    console.error("Error getting report:", error)
    return {
      error: error.message || "Failed to get report",
      details: {
        message: error.message,
        stack: error.stack,
        name: error.name,
      },
    }
  }
}
